============
ViewedModels
============

Viewed Models is a simple way to add PostGres "views" which look to Django just like Models.
This lets us go outside the Django ORM to create views or materialized views to harness
the power of PostGreSQL without losing the power to access that data using the ORM. It is
very probably compatible with other DBMS but tested only with PG.

============
Installation
============

For production::

    pip install django-viewedmodels


For development::

    pip install -e git+https://github.com/joshbrooks/django_viewedmodels#egg=viewedmodels

=======
Usage
=======

* A model which uses this framework should inherit from ViewedModel
* The model requires an "sql" method which returns the sql required to create view
* The model also requires a "dependencies" attribute. These are useful in generating table names within the SQL statement as well as dependency resolution.
* The model also requires fields specified in the standard Django way. Foreign keys should work fine.
* Foreign Keys: For ``ForeignKey(myApp.MyModel')`` we need to have a field ``mymodel_id`` returned from the SQL.
* Every Django model (including these ViewedModels) requires an 'id' field. We can fake this by including ``row_number() OVER () AS id`` somewhere (usually as the first item) in our SELECT statement.

=======
Example
=======
::

    from django.db import models
    from django.contrib.postgres.fields import JSONField
    from viewedmodels.models import ViewedModel
    from viewedmodels.helpers import dependency_lookup


    class ActivityCommitment(ViewedModel):
        # Declaring dependencies for table lookup in the query and orderly build/ teardown of the views structure if
        # there is inheritance between ViewedModel instances
        dependencies = (
            ('aims', 'Activity'),
            ('aims', 'AidTypeCategory'),
            ('iati', 'Transaction'),
            ('aims', 'AidType'),
            ('aims', 'TransactionValueUSD')
        )

        @classmethod
        def sql(cls):
            tables = dependency_lookup(
                cls.dependencies)  # This returns a lookup for 'app_model' string to the true table name
            return '''
            SELECT
                -- Columns { id, activity_id, aidtypecategory_id, dollars } reflect our field definition for the model
                ROW_NUMBER() OVER () id, --Note how an id field is autogenerated for Django's sake
                {aims_activity}.remote_data_id activity_id, -- This will be used as a ForeignKeyField, Django requires _id by default
                {aims_aidtypecategory}.code aidtypecategory_id, -- Another fk field
                {aims_transactionvalueusd}.dollars dollars
            FROM
                {aims_activity},
                {aims_transactionvalueusd},
                {iati_transaction},
                {aims_aidtype},
                {aims_aidtypecategory}
            WHERE
                --... --truncated for brevity
        '''.format(**tables)

        # id = models.AutoField(primary_key=True)
        activity = models.ForeignKey('aims.Activity')  # Represented as 'activity_id' in the query above
        aidtypecategory = models.ForeignKey(
            'aims.AidTypeCategory')  # Represented as 'aidtypecategory_id' in the query above
        dollars = models.FloatField()
